<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20181116 19:34:26" type="library" name="test" format="ROBOT">
<version></version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Documentation for test library ``test``.</doc>
<kw name="Keyword">
<arguments>
<arg>name=None</arg>
<arg>tags=()</arg>
</arguments>
<doc>Decorator to set custom keyword names and tags to functions and methods.

This decorator creates the ``robot_name`` and ``robot_tags`` attributes on
the decorated keyword method or function.  Robot Framework checks them to
determine the keyword's name and tags, respectively.

library.py::

    @keyword(name='Login Via User Panel')
    def login(username, password):
        # ...

    @keyword(name='Logout Via User Panel', tags=['example', 'tags'])
    def logout():
        # ...

tests.robot::

    Login Via User Panel    myusername    mypassword

If ``name`` is not given, the actual name of the keyword will not be
affected, but the ``robot_name`` attribute will still be created.
This can be useful for marking methods as keywords in a dynamic library.
In this usage it is possible to also omit parenthesis when using the
decorator::

    @keyword
    def func():
        # ...</doc>
<tags>
</tags>
</kw>
<kw name="Print name ${name}">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
</keywordspec>
